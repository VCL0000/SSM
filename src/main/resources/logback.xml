<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <jmxConfigurator /> <!--JMX jconsole connect-->
    <!--<configuration scan="true" scanPeriod="30 seconds">--> <!--文档给出16次logger后才会扫描-->


    <property name="log.root.level" value="INFO"/>
    <property name="log.other.level" value="DEBUG"/>
    <property name="log.base" value="logs"/>
    <property name="log.moduleName" value="SSM"/>
    <property name="log.max.size" value="10MB"/>
    <property name="log.his" value="30"/>

    <!--<propereadFilefile="src/main/resources/logback.properties"/>-->
    <!--<propereadFilefile="src/main/resources/jdbc.properties"/>-->

    <!--<if condition='property("key").contains("value")'>
        <then>
            &lt;!&ndash;可以用来对不同环境进行切换&ndash;&gt;
        </then>
    </if>-->

    <!--DB输出-->
    <!--<appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource
                class="ch.qos.logback.core.db.DriverManagerConnectionSource">
            <driverClass>${jdbc.driver}</driverClass>
            <url>${jdbc.url}</url>
            <user>${jdbc.username}</user>
            <password>${jdbc.password}</password>
        </connectionSource>
    </appender>-->


    <!--控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>%boldWhite(%date{yyyy-MM-dd HH:mm:ss.SSS}) %magenta(%-5level) [%yellow(%thread)] %boldCyan(%logger{15}).%boldGreen(%method):%gray(%L) -:%msg%n</Pattern>
            <!--<pattern>[%thread] %highlight(%-5level) %cyan(%logger{15}) - %msg %n</pattern>-->
        </encoder>
    </appender>

    <!-- 日志文件输出 -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.base}/${log.moduleName}.log
        </File><!-- 设置日志不超过${log.max.size}时的保存路径，注意如果 是web项目会保存到Tomcat的bin目录 下 -->
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/archive/SSM_all_%d{yyyy-MM-dd}.%i.log.gz
            </FileNamePattern>
            <maxFileSize>${log.max.size}</maxFileSize>
            <maxHistory>${log.his}</maxHistory><!--days-->
        </rollingPolicy>
        <!-- 日志输出的文件的格式  -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread]%logger{56}.%method:%L -:%msg%n</pattern>
            </layout>
        </encoder>
    </appender>


    <logger name="org.apache.cxf" additivity="false">
        <level value="${log.other.level}"/>
        <appender-ref ref="file"/>
    </logger>
    <!--<logger name="dao" level="DEBUG" additivity="false">-->
    <!--<appender-ref rreadFilefile" />-->
    <!--<appender-ref ref="stdout"/>-->
    <!--</logger>-->
    <logger name="com.vcl0000" level="DEBUG" additivity="false">
        <appender-ref ref="stdout"/>
    </logger>
    <!-- level:
        用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
        如果未设置此属性，那么当前loger将会继承上级的级别。-->
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>
    <!-- root将级别为“DEBUG”及大于“DEBUG”的日志信息交给已经配置好的名为“Console”的appender处理，“Console”appender将信息打印到Console -->
    <root level="${log.root.level}">
        <!--<appender-ref ref="stdout"/> &lt;!&ndash; 标识这个appender将会添加到这个logger &ndash;&gt;-->
        <appender-ref ref="file"/>
        <!--<appender-ref ref="DB"/>-->
    </root>

</configuration>